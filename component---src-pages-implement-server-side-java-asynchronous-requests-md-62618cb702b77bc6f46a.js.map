{"version":3,"file":"component---src-pages-implement-server-side-java-asynchronous-requests-md-62618cb702b77bc6f46a.js","mappings":"gNAUsBA,E,wEAFTC,EAAe,CAAC,EAOvBC,GALgBF,EAKU,YALF,SAA6BG,GAEzD,OADAC,QAAQC,KAAK,aAAeL,EAAO,4EAC5B,eAASG,EACjB,GAGKG,EAAc,CAClBL,aAAAA,GAEIM,EAAYC,EAAAA,EACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGP,GACF,YACD,OAAO,SAACI,GAAD,UAAeD,EAAiBH,EAAhC,CAAuCO,WAAYA,EAAYC,QAAQ,eAG5E,eACE,GAAM,yBADR,0BAGA,eACE,GAAM,eADR,gBAGA,wRACA,eACE,GAAM,qBADR,sBAGA,SAACT,EAAD,CAAWU,MAAM,gBAAgBC,OAAO,IAAIC,UAAU,OAAOH,QAAQ,eACrE,eACE,GAAM,WADR,YAGA,qBAAK,iBAAMI,WAAW,MAClB,UAAa,uBADZ,oSAML,eACE,GAAM,WADR,YAGA,+BAAgB,uBAAYA,WAAW,KAAvB,UAAhB,kDACA,SAACb,EAAD,CAAWU,MAAM,gBAAgBC,OAAO,IAAIC,UAAU,OAAOH,QAAQ,eACrE,eACE,GAAM,qBADR,sBAGA,qBAAK,iBAAMI,WAAW,MAClB,UAAa,uBADZ,y9CAyCL,oDAAqC,cAAGA,WAAW,IAC/C,KAAQ,qBADyB,uBAArC,wCAEwE,cAAGA,WAAW,IAClF,KAAQ,sBAD4D,mBAFxE,gBAKA,yDAA0C,uBAAYA,WAAW,KAAvB,cAA1C,2IAGH,CAEDN,EAAWO,gBAAiB,C","sources":["webpack://target-developers/./src/pages/implement/server-side/java/asynchronous-requests.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/target-developers/target-developers/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst CodeBlock = makeShortcode(\"CodeBlock\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"asynchronous-requests\"\n    }}>{`Asynchronous Requests`}</h1>\n    <h2 {...{\n      \"id\": \"description\"\n    }}>{`Description`}</h2>\n    <p>{`One benefit of server-side integration is that you can leverage the huge bandwidth and computing resources available on the server-side by using parallelism. Target Java SDK supports asynchronous requests, which can reduce the effective target time to zero.`}</p>\n    <h2 {...{\n      \"id\": \"supported-methods\"\n    }}>{`Supported Methods`}</h2>\n    <CodeBlock slots=\"heading, code\" repeat=\"1\" languages=\"Java\" mdxType=\"CodeBlock\" />\n    <h3 {...{\n      \"id\": \"methods\"\n    }}>{`Methods`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`CompletableFuture<TargetDeliveryResponse> getOffersAsync(TargetDeliveryRequest request);\nCompletableFuture<ResponseStatus> sendNotificationsAsync(TargetDeliveryRequest request);\nCompletableFuture<Attributes> getAttributesAsync(TargetDeliveryRequest targetRequest, String ...mboxes);\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"example\"\n    }}>{`Example`}</h2>\n    <p>{`A sample `}<inlineCode parentName=\"p\">{`Spring`}</inlineCode>{` application Controller could look like this:`}</p>\n    <CodeBlock slots=\"heading, code\" repeat=\"1\" languages=\"Java\" mdxType=\"CodeBlock\" />\n    <h3 {...{\n      \"id\": \"sample-controller\"\n    }}>{`Sample Controller`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`@RestController\npublic class TargetRestController {\n\n    @Autowired\n    private TargetClient targetJavaClient;\n\n    @GetMapping(\"/mboxTargetOnlyAsync\")\n        public TargetDeliveryResponse mboxTargetOnlyAsync(\n                @RequestParam(name = \"mbox\", defaultValue = \"server-side-mbox\") String mbox,\n                HttpServletRequest request, HttpServletResponse response) {\n            ExecuteRequest executeRequest = new ExecuteRequest()\n                    .mboxes(getMboxRequests(mbox));\n\n            TargetDeliveryRequest targetDeliveryRequest = TargetDeliveryRequest.builder()\n                    .context(getContext(request))\n                    .execute(executeRequest)\n                    .cookies(getTargetCookies(request.getCookies()))\n                    .build();\n            CompletableFuture<TargetDeliveryResponse> targetResponseAsync =\n                    targetJavaClient.getOffersAsync(targetDeliveryRequest);\n            targetResponseAsync.thenAccept(tr -> setCookies(tr.getCookies(), response));\n            simulateIO();\n            TargetDeliveryResponse targetResponse = targetResponseAsync.join();\n            return targetResponse;\n        }\n\n    /**\n     * Function for simulating network calls like other microservices and database calls\n     */\n    private void simulateIO() {\n        try {\n            Thread.sleep(200L);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n\n}\n`}</code></pre>\n    <p>{`This example assumes you have `}<a parentName=\"p\" {...{\n        \"href\": \"initialize-sdk.md\"\n      }}>{`initialized the SDK`}</a>{` as a spring bean and that you have `}<a parentName=\"p\" {...{\n        \"href\": \"utility-methods.md\"\n      }}>{`utility methods`}</a>{` available.`}</p>\n    <p>{`The Target request is fired before `}<inlineCode parentName=\"p\">{`simulateIO`}</inlineCode>{` and by the time it is executed target result should also be ready. Even if it is not, you will have significant savings in most cases.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["name","_frontmatter","CodeBlock","props","console","warn","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","slots","repeat","languages","parentName","isMDXComponent"],"sourceRoot":""}