{"version":3,"file":"component---src-pages-implement-server-side-net-sdk-events-md-39d83cea1ea72868e5c7.js","mappings":"+MAUsBA,E,wEAFTC,EAAe,CAAC,EAOvBC,GALgBF,EAKU,YALF,SAA6BG,GAEzD,OADAC,QAAQC,KAAK,aAAeL,EAAO,4EAC5B,eAASG,EACjB,GAGKG,EAAc,CAClBL,aAAAA,GAEIM,EAAYC,EAAAA,EACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGP,GACF,YACD,OAAO,SAACI,GAAD,UAAeD,EAAiBH,EAAhC,CAAuCO,WAAYA,EAAYC,QAAQ,eAG5E,eACE,GAAM,cADR,eAGA,eACE,GAAM,eADR,gBAGA,2BAAY,cAAGC,WAAW,IACtB,KAAQ,wBADA,wBAAZ,kBAEmD,uBAAYA,WAAW,KAAvB,4BAFnD,qCAE4J,uBAAYA,WAAW,KAAvB,sBAF5J,kMAIA,eACE,GAAM,UADR,WAGA,oFACA,uBACE,kBAAOA,WAAW,UAChB,eAAIA,WAAW,UACb,eAAIA,WAAW,KACb,MAAS,MADX,SAGA,eAAIA,WAAW,KACb,MAAS,MADX,cAGA,eAAIA,WAAW,KACb,MAAS,MADX,kBAKJ,kBAAOA,WAAW,UAChB,eAAIA,WAAW,UACb,eAAIA,WAAW,KACb,MAAS,MADX,6BAGA,eAAIA,WAAW,KACb,MAAS,MADX,SAGA,eAAIA,WAAW,KACb,MAAS,MADX,mFAIF,eAAIA,WAAW,UACb,eAAIA,WAAW,KACb,MAAS,MADX,8BAGA,eAAIA,WAAW,KACb,MAAS,MADX,qCAGA,eAAIA,WAAW,KACb,MAAS,MADX,uEAIF,eAAIA,WAAW,UACb,eAAIA,WAAW,KACb,MAAS,MADX,2BAGA,eAAIA,WAAW,KACb,MAAS,MADX,cAGA,eAAIA,WAAW,KACb,MAAS,MADX,0FAMN,eACE,GAAM,WADR,YAGA,SAACV,EAAD,CAAWW,MAAM,gBAAgBC,OAAO,IAAIC,UAAU,SAASJ,QAAQ,eACvE,eACE,GAAM,OADR,YAGA,qBAAK,iBAAMC,WAAW,MAClB,UAAa,mBADZ,24BA0BR,CAEDH,EAAWO,gBAAiB,C","sources":["webpack://target-developers/./src/pages/implement/server-side/net/sdk-events.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/target-developers/target-developers/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst CodeBlock = makeShortcode(\"CodeBlock\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"sdk-events\"\n    }}>{`SDK Events`}</h1>\n    <h2 {...{\n      \"id\": \"description\"\n    }}>{`Description`}</h2>\n    <p>{`When `}<a parentName=\"p\" {...{\n        \"href\": \"../initialize-sdk.md\"\n      }}>{`initializing the SDK`}</a>{`, an optional `}<inlineCode parentName=\"p\">{`OnDeviceDecisioningReady`}</inlineCode>{` delegate can be provided on the `}<inlineCode parentName=\"p\">{`TargetClientConfig`}</inlineCode>{` object, which will be invoked when the SDK is ready for on-device method calls.\nThere are also a couple other delegates available for handling the on-device decisioning artifact download.`}</p>\n    <h2 {...{\n      \"id\": \"events\"\n    }}>{`Events`}</h2>\n    <p>{`The following delegates can be configured for certain events:`}</p>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Name`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Arguments`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`OnDeviceDecisioningReady`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`None`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Called only once the first time the client is ready for on-device decisioning`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`ArtifactDownloadSucceeded`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`string contents of artifact file`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Called every time an on-device decisioning artifact is downloaded`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`ArtifactDownloadFailed`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Exception`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Called every time there is a failure to download an on-device decisioning artifact`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h2 {...{\n      \"id\": \"example\"\n    }}>{`Example`}</h2>\n    <CodeBlock slots=\"heading, code\" repeat=\"1\" languages=\"dotnet\" mdxType=\"CodeBlock\" />\n    <h3 {...{\n      \"id\": \"net\"\n    }}>{`.`}{`NET`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-dotnet\"\n      }}>{`var clientConfig = new TargetClientConfig.Builder(\"acmeclient\", \"1234567890@AdobeOrg\")\n    .SetDecisioningMethod(DecisioningMethod.OnDevice)\n    .SetOnDeviceDecisioningReady(DecisioningReady)\n    .SetArtifactDownloadSucceeded(artifact => Console.WriteLine(\"The artifact was successfully downloaded. Contents: \" + artifact))\n    .SetArtifactDownloadFailed(exception => Console.WriteLine(\"The artifact failed to download. Exception: \" + exception.Message))\n    .Build();\n\nvar targetClient = TargetClient.Create(clientConfig);\n\n// ...\n\nstatic void DecisioningReady()\n{\n    var mboxRequests = new List<MboxRequest> { new (index: 1, name: \"a1-serverside-ab\") };\n\n    var targetDeliveryRequest = new TargetDeliveryRequest.Builder()\n        .SetExecute(new ExecuteRequest(mboxes: mboxRequests))\n        .Build();\n\n    var targetResponse = targetClient.GetOffers(targetDeliveryRequest);\n}\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["name","_frontmatter","CodeBlock","props","console","warn","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","parentName","slots","repeat","languages","isMDXComponent"],"sourceRoot":""}