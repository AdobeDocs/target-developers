{"version":3,"file":"component---src-pages-implement-server-side-sdk-guides-core-principles-user-identification-and-bucketing-md-5b50c3c97bdf460a3fcc.js","mappings":"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","sources":["webpack://target-developers/./src/pages/implement/server-side/sdk-guides/core-principles/user-identification-and-bucketing.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/target-developers/target-developers/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"user-identification-and-bucketing\"\n    }}>{`User identification and bucketing`}</h1>\n    <h2 {...{\n      \"id\": \"user-identification\"\n    }}>{`User Identification`}</h2>\n    <p>{`There are multiple ways in which a user can be identified within Adobe Target. Target uses the following identifiers:`}</p>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Field Name`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`tntID`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`The `}<inlineCode parentName=\"td\">{`tntId`}</inlineCode>{` is the primary identifier in Target for a user. You can supply this ID, or Target will auto-generate it if the request doesn’t contain one.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`thirdPartyId`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`The `}<inlineCode parentName=\"td\">{`thirdPartyId`}</inlineCode>{` is your company’s identifier for the user, which you can send with every call. When a user logs in to a company's site, the company typically creates an ID that is tied to the visitor's account, loyalty card, membership number, or other applicable identifiers for that company.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`marketingCloudVisitorId`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`The `}<inlineCode parentName=\"td\">{`marketingCloudVisitorId`}</inlineCode>{` is used to merge and share data between different Adobe solutions. The marketingCloudVisitorId is required for integrations with Adobe Analytics and Adobe Audience Manager.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`customerIds`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Along with the Experience Cloud Visitor ID, additional `}<a parentName=\"td\" {...{\n              \"href\": \"https://experienceleague.adobe.com/docs/id-service/using/reference/authenticated-state.html\"\n            }}>{`customer IDs`}</a>{` and an authenticated status for each visitor can also be utilized.`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h2 {...{\n      \"id\": \"target-id-tntid\"\n    }}>{`Target ID (tntID)`}</h2>\n    <p>{`The Target ID, or `}<inlineCode parentName=\"p\">{`tntId`}</inlineCode>{`, can be considered a device ID. This `}<inlineCode parentName=\"p\">{`tntId`}</inlineCode>{` is generated automatically by Adobe Target if it is not provided in the request. Subsequent requests need to include this `}<inlineCode parentName=\"p\">{`tntId`}</inlineCode>{` in order for the right content to be delivered to a device used by the same user.`}</p>\n    <p>{`The following sample call demonstrates a situation in which a `}<inlineCode parentName=\"p\">{`tntId`}</inlineCode>{` is not passed to Target.`}</p>\n    <h3 {...{\n      \"id\": \"nodejs-sdk\"\n    }}>{`Node.js SDK`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-Javascript\"\n      }}>{`const TargetClient = require(\"@adobe/target-nodejs-sdk\");\n\nconst CONFIG = {\n  client: \"acmeclient\",\n  organizationId: \"1234567890@AdobeOrg\"\n};\n\nconst targetClient = TargetClient.create(CONFIG);\n\ntargetClient.getOffers({\n  request: {\n    execute: {\n      mboxes: [{\n        name: \"some-mbox\"\n      }]\n    }\n  }\n})\n.then(console.log)\n.catch(console.error);\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"java-sdk\"\n    }}>{`Java SDK`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-Java\"\n      }}>{`ClientConfig config = ClientConfig.builder()\n  .client(\"acmeclient\")\n  .organizationId(\"1234567890@AdobeOrg\")\n  .build();\nTargetClient targetClient = TargetClient.create(config);\n\nContext context = new Context().channel(ChannelType.WEB);\nMboxRequest mbox = new MboxRequest()\n  .name(\"some-mbox\")\n  .index(0);\nExecuteRequest executeRequest = new ExecuteRequest()\n  .mboxes(Arrays.asList(mbox));\n\nTargetDeliveryRequest request = TargetDeliveryRequest.builder()\n  .context(context)\n  .execute(executeRequest)\n  .build();\n\nTargetDeliveryResponse offers = targetClient.getOffers(request);\n`}</code></pre>\n    <p>{`In the absence of a `}<inlineCode parentName=\"p\">{`tntId`}</inlineCode>{`, Adobe Target generates a `}<inlineCode parentName=\"p\">{`tntId`}</inlineCode>{` and provides it in the response, as follows.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-JSON\"\n      }}>{`{\n  \"status\": 200,\n  \"requestId\": \"5b586f83-890c-46ae-93a2-610b1caa43ef\",\n  \"client\": \"acmeclient\",\n  \"id\": {\n      \"tntId\": \"10abf6304b2714215b1fd39a870f01afc.35_0\"\n  },\n  \"edgeHost\": \"mboxedge35.tt.omtrdc.net\",\n  ...\n}\n`}</code></pre>\n    <p>{`In this example, the generated `}<inlineCode parentName=\"p\">{`tntId`}</inlineCode>{` is `}<inlineCode parentName=\"p\">{`10abf6304b2714215b1fd39a870f01afc.35_0`}</inlineCode>{`. Please note this `}<inlineCode parentName=\"p\">{`tntId`}</inlineCode>{` needs to be used for the same user across sessions.`}</p>\n    <h2 {...{\n      \"id\": \"third-party-id-thirdpartyid\"\n    }}>{`Third Party ID (thirdPartyId)`}</h2>\n    <p>{`If your organization uses an ID to identify your visitor, you can use `}<inlineCode parentName=\"p\">{`thirdPartyID`}</inlineCode>{` to deliver content. A `}<inlineCode parentName=\"p\">{`thirdPartyID`}</inlineCode>{` is a persistent ID that your business utilizes to identify an end user, regardless of whether they interact with your business from web, mobile, or IoT channels. In other words, the `}<inlineCode parentName=\"p\">{`thirdPartyId`}</inlineCode>{` references user profile data that can be utilized across channels. However, you must provide the `}<inlineCode parentName=\"p\">{`thirdPartyID`}</inlineCode>{` for every Adobe Target Delivery API call you make.`}</p>\n    <p>{`The following sample call demonstrates the use of a `}<inlineCode parentName=\"p\">{`thirdPartyId`}</inlineCode>{`.`}</p>\n    <h3 {...{\n      \"id\": \"nodejs-sdk-1\"\n    }}>{`Node.js SDK`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-Javascript\"\n      }}>{`const TargetClient = require(\"@adobe/target-nodejs-sdk\");\n\nconst CONFIG = {\n  client: \"acmeclient\",\n  organizationId: \"1234567890@AdobeOrg\"\n};\n\nconst targetClient = TargetClient.create(CONFIG);\n\ntargetClient.getOffers({\n  request: {\n    id: {\n      thirdPartyId: \"B234A029348\"\n    },\n    execute: {\n      mboxes: [{\n        name: \"some-mbox\"\n      }]\n    }\n  }\n})\n.then(console.log)\n.catch(console.error);\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"java-sdk-1\"\n    }}>{`Java SDK`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-Java\"\n      }}>{`ClientConfig config = ClientConfig.builder()\n  .client(\"acmeclient\")\n  .organizationId(\"1234567890@AdobeOrg\")\n  .build();\nTargetClient targetClient = TargetClient.create(config);\n\nVisitorId id = new VisitorId()\n  .thirdPartyId(\"B234A029348\");\nContext context = new Context().channel(ChannelType.WEB);\nMboxRequest mbox = new MboxRequest()\n  .name(\"some-mbox\")\n  .index(0);\nExecuteRequest executeRequest = new ExecuteRequest()\n  .mboxes(Arrays.asList(mbox));\n\nTargetDeliveryRequest request = TargetDeliveryRequest.builder()\n  .context(context)\n  .execute(executeRequest)\n  .build();\n\nTargetDeliveryResponse offers = targetClient.getOffers(request);\n`}</code></pre>\n    <p>{`In this scenario, Adobe Target will generate a `}<inlineCode parentName=\"p\">{`tntId`}</inlineCode>{` since it was not passed into the original call, which will be mapped to the provided `}<inlineCode parentName=\"p\">{`thirdPartyId`}</inlineCode>{`.`}</p>\n    <h2 {...{\n      \"id\": \"marketing-cloud-visitor-id-marketingcloudvisitorid\"\n    }}>{`Marketing Cloud Visitor ID (marketingCloudVisitorId)`}</h2>\n    <p>{`The `}<inlineCode parentName=\"p\">{`marketingCloudVisitorId`}</inlineCode>{` is a universal and persistent ID that identifies your visitors across all solutions in the Adobe Experience Cloud. When your organization implements the ID service, this ID lets you identify the same site visitor and their data in different Experience Cloud solutions, including Adobe Target, Adobe Analytics, and Adobe Audience Manager. Please note the `}<inlineCode parentName=\"p\">{`marketingCloudVisitorId`}</inlineCode>{` is required when integrating Target with Analytics and Audience Manager.`}</p>\n    <p>{`The following sample call demonstrates how a `}<inlineCode parentName=\"p\">{`marketingCloudVisitorId`}</inlineCode>{` that was retrieved from the Experience Cloud ID Service is passed to Target.`}</p>\n    <h3 {...{\n      \"id\": \"nodejs-sdk-2\"\n    }}>{`Node.js SDK`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-Javascript\"\n      }}>{`const TargetClient = require(\"@adobe/target-nodejs-sdk\");\n\nconst CONFIG = {\n  client: \"acmeclient\",\n  organizationId: \"1234567890@AdobeOrg\"\n};\n\nconst targetClient = TargetClient.create(CONFIG);\n\ntargetClient.getOffers({\n  request: {\n    id: {\n      marketingCloudVisitorId: \"10527837386392355901041112038610706884\"\n    },\n    execute: {\n      mboxes: [{\n        name: \"some-mbox\"\n      }]\n    }\n  }\n})\n.then(console.log)\n.catch(console.error);\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"java-sdk-2\"\n    }}>{`Java SDK`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-Java\"\n      }}>{`ClientConfig config = ClientConfig.builder()\n  .client(\"acmeclient\")\n  .organizationId(\"1234567890@AdobeOrg\")\n  .build();\nTargetClient targetClient = TargetClient.create(config);\n\nVisitorId id = new VisitorId()\n  .marketingCloudVisitorId(\"10527837386392355901041112038610706884\");\nContext context = new Context().channel(ChannelType.WEB);\nMboxRequest mbox = new MboxRequest()\n  .name(\"some-mbox\")\n  .index(0);\nExecuteRequest executeRequest = new ExecuteRequest()\n  .mboxes(Arrays.asList(mbox));\n\nTargetDeliveryRequest request = TargetDeliveryRequest.builder()\n  .context(context)\n  .execute(executeRequest)\n  .build();\n\nTargetDeliveryResponse offers = targetClient.getOffers(request);\n`}</code></pre>\n    <p>{`In this scenario, Target will generate a `}<inlineCode parentName=\"p\">{`tntId`}</inlineCode>{` since it was not passed into the original call, which will be mapped to the provided `}<inlineCode parentName=\"p\">{`marketingCloudVisitorId`}</inlineCode>{`.`}</p>\n    <h2 {...{\n      \"id\": \"customer-id-customerids\"\n    }}>{`Customer ID (customerIds)`}</h2>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"https://experienceleague.adobe.com/docs/id-service/using/reference/authenticated-state.html\"\n      }}>{`Customer IDs`}</a>{` can be added to, or associated with, an Experience Cloud Visitor ID. Whenever sending `}<inlineCode parentName=\"p\">{`customerIds`}</inlineCode>{`, the `}<inlineCode parentName=\"p\">{`marketingCloudVisitorId`}</inlineCode>{` must also be provided. Furthermore, an authentication status can be provided along with each `}<inlineCode parentName=\"p\">{`customerId`}</inlineCode>{` for each visitor. The following authentication statuses may be used:`}</p>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Authentication Status`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`User Status`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`unknown`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Unknown or never authenticated. This state can be used for scenarios such as that in which a visitor lands on your site by clicking a display advert.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`authenticated`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`The user is currently authenticated with an active session on your website or app.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`logged_out`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`The user was authenticated but actively logged out. The user intended to disconnect from the authenticated state. The user no longer wants to be treated as authenticated.`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <p>{`Please note that only when the `}<inlineCode parentName=\"p\">{`customerId`}</inlineCode>{` is in an authenticated state will Target reference the user profile data that is stored and linked to the customerId. If the `}<inlineCode parentName=\"p\">{`customerId`}</inlineCode>{` is in an unknown or `}<inlineCode parentName=\"p\">{`logged_out`}</inlineCode>{` state, it will be ignored, and any user profile data that may be associated with that `}<inlineCode parentName=\"p\">{`customerId`}</inlineCode>{` will not be leveraged for audience targeting.`}</p>\n    <h3 {...{\n      \"id\": \"nodejs-sdk-3\"\n    }}>{`Node.js SDK`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-Javascript\"\n      }}>{`const TargetClient = require(\"@adobe/target-nodejs-sdk\");\n\nconst CONFIG = {\n  client: \"acmeclient\",\n  organizationId: \"1234567890@AdobeOrg\"\n};\n\nconst targetClient = TargetClient.create(CONFIG);\n\ntargetClient.getOffers({\n  request: {\n    id: {\n      marketingCloudVisitorId : \"10527837386392355901041112038610706884\",\n      customerIds: [{\n        id: \"134325423\",\n        integrationCode : \"crm_data\",\n        authenticatedState : \"authenticated\"\n      }]\n    },\n    execute: {\n      mboxes: [{\n        name: \"some-mbox\"\n      }]\n    }\n  }\n})\n.then(console.log)\n.catch(console.error);\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"java-sdk-3\"\n    }}>{`Java SDK`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-Java\"\n      }}>{`ClientConfig config = ClientConfig.builder()\n  .client(\"acmeclient\")\n  .organizationId(\"1234567890@AdobeOrg\")\n  .build();\nTargetClient targetClient = TargetClient.create(config);\n\nCustomerId customerId = new CustomerId()\n  .id(\"134325423\")\n  .integrationCode(\"crm_data\")\n  .authenticatedState(AuthenticatedState.AUTHENTICATED);\nVisitorId id = new VisitorId()\n  .marketingCloudVisitorId(\"10527837386392355901041112038610706884\")\n  .customerIds(Arrays.asList(customerId));\nContext context = new Context().channel(ChannelType.WEB);\nMboxRequest mbox = new MboxRequest()\n  .name(\"some-mbox\")\n  .index(0);\nExecuteRequest executeRequest = new ExecuteRequest()\n  .mboxes(Arrays.asList(mbox));\n\nTargetDeliveryRequest request = TargetDeliveryRequest.builder()\n  .context(context)\n  .execute(executeRequest)\n  .build();\n\nTargetDeliveryResponse offers = targetClient.getOffers(request);\n`}</code></pre>\n    <p>{`The example above demonstrates how to send a `}<inlineCode parentName=\"p\">{`customerId`}</inlineCode>{` with an `}<inlineCode parentName=\"p\">{`authenticatedState`}</inlineCode>{`. When sending a `}<inlineCode parentName=\"p\">{`customerId`}</inlineCode>{`, the `}<inlineCode parentName=\"p\">{`integrationCode`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`id`}</inlineCode>{`, and `}<inlineCode parentName=\"p\">{`authenticatedState`}</inlineCode>{` as well as the `}<inlineCode parentName=\"p\">{`marketingCloudVisitorId`}</inlineCode>{` are required. The `}<inlineCode parentName=\"p\">{`integrationCode`}</inlineCode>{` is the alias of the `}<a parentName=\"p\" {...{\n        \"href\": \"https://experienceleague.adobe.com/docs/target/using/audiences/visitor-profiles/working-with-customer-attributes.html\"\n      }}>{`customer attributes file`}</a>{` you provided through CRS.`}</p>\n    <h2 {...{\n      \"id\": \"merged-profile\"\n    }}>{`Merged Profile`}</h2>\n    <p>{`You can combine `}<inlineCode parentName=\"p\">{`tntId`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`thirdPartyID`}</inlineCode>{`, and `}<inlineCode parentName=\"p\">{`marketingCloudVisitorId`}</inlineCode>{` in the same request. In this scenario, Adobe Target will maintain the mapping of all these IDs and pin it to a visitor. Learn how profiles are `}<a parentName=\"p\" {...{\n        \"href\": \"https://experienceleague.adobe.com/docs/target/using/audiences/visitor-profiles/3rd-party-id.html\"\n      }}>{`merged and synced in real time`}</a>{` using the different identifiers.`}</p>\n    <h3 {...{\n      \"id\": \"node-js-sdk\"\n    }}>{`Node JS SDK`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-Javascript\"\n      }}>{`const TargetClient = require(\"@adobe/target-nodejs-sdk\");\n\nconst CONFIG = {\n  client: \"acmeclient\",\n  organizationId: \"1234567890@AdobeOrg\"\n};\n\nconst targetClient = TargetClient.create(CONFIG);\n\ntargetClient.getOffers({\n  request: {\n    id: {\n      tntId: \"d359234570e044f14e1faeeba02d6ab23439914e.35_0\",\n      thirdPartyId: \"B234A029348\",\n      marketingCloudVisitorId : \"10527837386392355901041112038610706884\"\n    },\n    execute: {\n      mboxes: [{\n        name: \"some-mbox\"\n      }]\n    }\n  }\n})\n.then(console.log)\n.catch(console.error);\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"java-sdk-4\"\n    }}>{`Java SDK`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-Java\"\n      }}>{`ClientConfig config = ClientConfig.builder()\n  .client(\"acmeclient\")\n  .organizationId(\"1234567890@AdobeOrg\")\n  .build();\nTargetClient targetClient = TargetClient.create(config);\n\nVisitorId id = new VisitorId()\n  .tntId(\"d359234570e044f14e1faeeba02d6ab23439914e.35_0\")\n  .thirdPartyId(\"B234A029348\")\n  .marketingCloudVisitorId(\"10527837386392355901041112038610706884\");\nContext context = new Context().channel(ChannelType.WEB);\nMboxRequest mbox = new MboxRequest()\n  .name(\"some-mbox\")\n  .index(0);\nExecuteRequest executeRequest = new ExecuteRequest()\n  .mboxes(Arrays.asList(mbox));\n\nTargetDeliveryRequest request = TargetDeliveryRequest.builder()\n  .context(context)\n  .execute(executeRequest)\n  .build();\n\nTargetDeliveryResponse offers = targetClient.getOffers(request);\n`}</code></pre>\n    <p>{`The example above demonstrates how you can combine `}<inlineCode parentName=\"p\">{`tntId`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`thirdPartyID`}</inlineCode>{`, and `}<inlineCode parentName=\"p\">{`marketingCloudVisitorId`}</inlineCode>{` in the same request.`}</p>\n    <h2 {...{\n      \"id\": \"bucketing\"\n    }}>{`Bucketing`}</h2>\n    <p>{`Your users are bucketed into seeing an experience depending on how you set up your Adobe Target activities. In Adobe Target, bucketing is:`}</p>\n    <ul>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Deterministic`}</strong>{`: MurmurHash3 is used to ensure that your user is bucketed and sees the right variation every single time as long as the user ID is consistent.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Sticky`}</strong>{`: Adobe Target stores the variation that your user sees in the user profile to ensure the variation is consistently shown to that user across sessions and channels. Variations and stickiness are guaranteed when using server-side decisioning. When on-device decisioning is used, stickiness is not guaranteed.`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"end-to-end-bucketing-workflow\"\n    }}>{`End-to-end bucketing workflow`}</h2>\n    <p>{`Before diving into the actual bucketing algorithm, it is important to highlight that similar steps are used both to select activities based on their traffic allocation percentage, as well as to select an experience within an activity.`}</p>\n    <h3 {...{\n      \"id\": \"activity-selection-steps\"\n    }}>{`Activity selection steps`}</h3>\n    <ol>\n      <li parentName=\"ol\">{`Generate a device ID, usually a UUID`}</li>\n      <li parentName=\"ol\">{`Get the client code`}</li>\n      <li parentName=\"ol\">{`Get the activity ID`}</li>\n      <li parentName=\"ol\">{`Get the salt, which is usually some string like \"activity\"`}</li>\n      <li parentName=\"ol\">{`Compute the hash using MurmurHash3`}</li>\n      <li parentName=\"ol\">{`Get the absolute value of the hash`}</li>\n      <li parentName=\"ol\">{`Divide the hash absolute value by 10000`}</li>\n      <li parentName=\"ol\">{`Divide the remainder by 10000, which should produce a value between 0 and 1`}</li>\n      <li parentName=\"ol\">{`Multiply the result by 100%`}</li>\n      <li parentName=\"ol\">{`Compare activity traffic allocation percentage against the obtained percentage. If the traffic allocation percentage is lower, then the activity is selected. Otherwise, the activity is skipped.`}</li>\n    </ol>\n    <h3 {...{\n      \"id\": \"experience-selection-steps\"\n    }}>{`Experience selection steps`}</h3>\n    <ol>\n      <li parentName=\"ol\">{`Generate a device ID, usually a UUID`}</li>\n      <li parentName=\"ol\">{`Get the client code`}</li>\n      <li parentName=\"ol\">{`Get the activity ID`}</li>\n      <li parentName=\"ol\">{`Get the salt, which is usually some string like \"experience\"`}</li>\n      <li parentName=\"ol\">{`Compute the hash using MurmurHash3`}</li>\n      <li parentName=\"ol\">{`Get the absolute value of the hash`}</li>\n      <li parentName=\"ol\">{`Divide the hash absolute value by 10000`}</li>\n      <li parentName=\"ol\">{`Divide the remainder by 10000, which should produce a value between 0 and 1`}</li>\n      <li parentName=\"ol\">{`Multiply the result by the total number of experiences within the activity`}</li>\n      <li parentName=\"ol\">{`Round the result. This should produce the experience index.`}</li>\n    </ol>\n    <h3 {...{\n      \"id\": \"example\"\n    }}>{`Example`}</h3>\n    <p>{`Assume the following:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Client C with client code `}<inlineCode parentName=\"li\">{`acmeclient`}</inlineCode></li>\n      <li parentName=\"ul\">{`Activity A that has ID `}<inlineCode parentName=\"li\">{`1111`}</inlineCode>{` and three experiences `}<inlineCode parentName=\"li\">{`E1`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`E2`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`E3`}</inlineCode></li>\n      <li parentName=\"ul\">{`Experiences have the following distribution: `}<inlineCode parentName=\"li\">{`E1`}</inlineCode>{` - 33%, `}<inlineCode parentName=\"li\">{`E2`}</inlineCode>{` - 33%, `}<inlineCode parentName=\"li\">{`E3`}</inlineCode>{` - 34%`}</li>\n    </ul>\n    <p>{`The selection flow looks like this:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`Device ID `}<inlineCode parentName=\"li\">{`702ff4d0-83b1-4e2e-a0a6-22cbe460eb15`}</inlineCode></li>\n      <li parentName=\"ol\">{`Client code `}<inlineCode parentName=\"li\">{`acmeclient`}</inlineCode></li>\n      <li parentName=\"ol\">{`Activity ID `}<inlineCode parentName=\"li\">{`1111`}</inlineCode></li>\n      <li parentName=\"ol\">{`Salt `}<inlineCode parentName=\"li\">{`experience`}</inlineCode></li>\n      <li parentName=\"ol\">{`Value to hash `}<inlineCode parentName=\"li\">{`acmeclient.1111.702ff4d0-83b1-4e2e-a0a6-22cbe460eb15.experience`}</inlineCode>{`, hash value `}<inlineCode parentName=\"li\">{`-919077116`}</inlineCode></li>\n      <li parentName=\"ol\">{`Absolute value of the hash `}<inlineCode parentName=\"li\">{`919077116`}</inlineCode></li>\n      <li parentName=\"ol\">{`Remainder after division by 10000, `}<inlineCode parentName=\"li\">{`7116`}</inlineCode></li>\n      <li parentName=\"ol\">{`Value after remainder is divided by 10000, `}<inlineCode parentName=\"li\">{`0.7116`}</inlineCode></li>\n      <li parentName=\"ol\">{`Result after multiplying the value against the total number of experiences `}<inlineCode parentName=\"li\">{`3 * 0.7116 = 2.1348`}</inlineCode></li>\n      <li parentName=\"ol\">{`The experience index is `}<inlineCode parentName=\"li\">{`2`}</inlineCode>{`, which means the third experience, since we are using `}<inlineCode parentName=\"li\">{`0`}</inlineCode>{` based indexing.`}</li>\n    </ol>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"sourceRoot":""}