"use strict";(self.webpackChunktarget_developers=self.webpackChunktarget_developers||[]).push([[4795],{24710:function(e,t,n){n.r(t),n.d(t,{_frontmatter:function(){return c},default:function(){return u}});var a,d=n(87462),o=n(63366),i=(n(15007),n(64983)),r=n(91515),l=["components"],c={},m=(a="CodeBlock",function(e){return console.warn("Component "+a+" was not imported, exported, or provided by MDXProvider as global scope"),(0,i.mdx)("div",e)}),s={_frontmatter:c},p=r.Z;function u(e){var t=e.components,n=(0,o.Z)(e,l);return(0,i.mdx)(p,(0,d.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,i.mdx)("h1",{id:"sdk-events"},"SDK Events"),(0,i.mdx)("h2",{id:"description"},"Description"),(0,i.mdx)("p",null,"When ",(0,i.mdx)("a",{parentName:"p",href:"../initialize-sdk.md"},"initializing the SDK"),", the ",(0,i.mdx)("inlineCode",{parentName:"p"},"options.events")," object is an optional object with event name keys and callback function values. It can be used to subscribe to various events that occur within the SDK. For instance the ",(0,i.mdx)("inlineCode",{parentName:"p"},"clientReady")," event may be used with a callback function that will be invoked when the SDK is ready for method calls."),(0,i.mdx)("p",null,"When the callback function is called, an event object is passed in. Each event has a ",(0,i.mdx)("inlineCode",{parentName:"p"},"type")," corresponding to the event name. Some events include additional properties with pertinent information."),(0,i.mdx)("h2",{id:"events"},"Events"),(0,i.mdx)("table",null,(0,i.mdx)("thead",{parentName:"table"},(0,i.mdx)("tr",{parentName:"thead"},(0,i.mdx)("th",{parentName:"tr",align:null},"Event Name (type)"),(0,i.mdx)("th",{parentName:"tr",align:null},"Description"),(0,i.mdx)("th",{parentName:"tr",align:null},"Additional Event Properties"))),(0,i.mdx)("tbody",{parentName:"table"},(0,i.mdx)("tr",{parentName:"tbody"},(0,i.mdx)("td",{parentName:"tr",align:null},"clientReady"),(0,i.mdx)("td",{parentName:"tr",align:null},"Emitted when the artifact has downloaded and the SDK is ready for ",(0,i.mdx)("inlineCode",{parentName:"td"},"getOffers")," calls. Recommended when using on-device decisioning method."),(0,i.mdx)("td",{parentName:"tr",align:null})),(0,i.mdx)("tr",{parentName:"tbody"},(0,i.mdx)("td",{parentName:"tr",align:null},"artifactDownloadSucceeded"),(0,i.mdx)("td",{parentName:"tr",align:null},"Emitted each time a new artifact is downloaded."),(0,i.mdx)("td",{parentName:"tr",align:null},"artifactPayload, artifactLocation")),(0,i.mdx)("tr",{parentName:"tbody"},(0,i.mdx)("td",{parentName:"tr",align:null},"artifactDownloadFailed"),(0,i.mdx)("td",{parentName:"tr",align:null},"Emitted each time an artifact fails to download."),(0,i.mdx)("td",{parentName:"tr",align:null},"artifactLocation, error")))),(0,i.mdx)("h2",{id:"example"},"Example"),(0,i.mdx)(m,{slots:"heading, code",repeat:"1",languages:"js",mdxType:"CodeBlock"}),(0,i.mdx)("h3",{id:"nodejs"},"Node.js"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-js"},'const targetClient = TargetClient.create({\n    client: "acmeclient",\n    organizationId: "1234567890@AdobeOrg",\n    decisioningMethod: "on-device",\n    events: {\n        clientReady: onTargetClientReady,\n        artifactDownloadSucceeded: onArtifactDownloadSucceeded,\n        artifactDownloadFailed: onArtifactDownloadFailed\n    }\n});\n\nfunction onTargetClientReady() {\n    // make getOffers requests\n    targetClient.getOffers({...})            \n}\n\nfunction onArtifactDownloadSucceeded(event) {\n    console.log(`The artifact was successfully downloaded from \'${event.artifactLocation}\'`);\n    // optionally do something with event.artifactPayload, like persist it\n}\n\nfunction onArtifactDownloadFailed(event) {\n    console.log(`The artifact failed to download from \'${event.artifactLocation}\' with the following error message: ${event.error.message}`);\n}\n')))}u.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-implement-server-side-node-js-sdk-events-md-b59e7ae859c8be222942.js.map