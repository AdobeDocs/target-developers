"use strict";(self.webpackChunktarget_developers=self.webpackChunktarget_developers||[]).push([[9607],{69498:function(e,t,n){n.r(t),n.d(t,{_frontmatter:function(){return c},default:function(){return m}});var s,o=n(87462),r=n(63366),i=(n(15007),n(64983)),a=n(91515),u=["components"],c={},l=(s="CodeBlock",function(e){return console.warn("Component "+s+" was not imported, exported, or provided by MDXProvider as global scope"),(0,i.mdx)("div",e)}),d={_frontmatter:c},p=a.Z;function m(e){var t=e.components,n=(0,r.Z)(e,u);return(0,i.mdx)(p,(0,o.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.mdx)("h1",{id:"utility-methods"},"Utility Methods"),(0,i.mdx)("p",null,"These helper methods are reusable across controllers and can be moved to a separate utility class."),(0,i.mdx)(l,{slots:"heading, code",repeat:"1",languages:"Java",mdxType:"CodeBlock"}),(0,i.mdx)("h3",{id:"methods"},"Methods"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-javascript"},'public class TargetRequestUtils {\n\n    public static Context getContext(HttpServletRequest request) {\n        Context context = new Context()\n                .channel(ChannelType.WEB)\n                .timeOffsetInMinutes(330.0)\n                .address(getAddress(request));\n        return context;\n    }\n\n    public static Address getAddress(HttpServletRequest request) {\n        Address address = new Address()\n                .referringUrl(request.getHeader("referer"))\n                .url(request.getRequestURL().toString());\n        return address;\n    }\n\n    public static List<TargetCookie> getTargetCookies(Cookie[] cookies) {\n        if (cookies == null) {\n            return Collections.emptyList();\n        }\n        return Arrays.stream(cookies)\n                .filter(Objects::nonNull)\n                .filter(cookie -> CookieUtils.getTargetCookieNames().contains(cookie.getName()))\n                .map(cookie -> new TargetCookie(cookie.getName(), cookie.getValue(), cookie.getMaxAge()))\n                .collect(Collectors.toList());\n    }\n\n    public static HttpServletResponse setCookies(List<TargetCookie> targetCookies,\n                                                  HttpServletResponse response) {\n        targetCookies\n                .stream()\n                .map(targetCookie -> new Cookie(targetCookie.getName(), targetCookie.getValue()))\n                .forEach(cookie -> {\n                    cookie.setPath("/");\n                    response.addCookie(cookie);\n                });\n        return response;\n    }\n\n    public static List<MboxRequest> getMboxRequests(String... name) {\n        List<MboxRequest> mboxRequests = new ArrayList<>();\n        for (int i = 0; i < name.length; i++) {\n            mboxRequests.add(new MboxRequest().name(name[i]).index(i));\n        }\n        return mboxRequests;\n    }\n\n    public static PrefetchRequest getPrefetchRequest() {\n        PrefetchRequest prefetchRequest = new PrefetchRequest();\n        ViewRequest viewRequest = new ViewRequest();\n        prefetchRequest.setViews(Arrays.asList(viewRequest));\n        return prefetchRequest;\n    }\n}\n')))}m.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-implement-server-side-java-utility-methods-md-4a592451158097b611ef.js.map