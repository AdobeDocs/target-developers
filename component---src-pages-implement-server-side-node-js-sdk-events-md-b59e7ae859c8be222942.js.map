{"version":3,"file":"component---src-pages-implement-server-side-node-js-sdk-events-md-b59e7ae859c8be222942.js","mappings":"gNAUsBA,E,wEAFTC,EAAe,CAAC,EAOvBC,GALgBF,EAKU,YALF,SAA6BG,GAEzD,OADAC,QAAQC,KAAK,aAAeL,EAAO,4EAC5B,eAASG,EACjB,GAGKG,EAAc,CAClBL,aAAAA,GAEIM,EAAYC,EAAAA,EACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGP,GACF,YACD,OAAO,SAACI,GAAD,UAAeD,EAAiBH,EAAhC,CAAuCO,WAAYA,EAAYC,QAAQ,eAG5E,eACE,GAAM,cADR,eAGA,eACE,GAAM,eADR,gBAGA,2BAAY,cAAGC,WAAW,IACtB,KAAQ,wBADA,wBAAZ,UAE2C,uBAAYA,WAAW,KAAvB,kBAF3C,+KAEoR,uBAAYA,WAAW,KAAvB,eAFpR,6GAGA,2GAA4F,uBAAYA,WAAW,KAAvB,QAA5F,4GACA,eACE,GAAM,UADR,WAGA,uBACE,kBAAOA,WAAW,UAChB,eAAIA,WAAW,UACb,eAAIA,WAAW,KACb,MAAS,MADX,sBAGA,eAAIA,WAAW,KACb,MAAS,MADX,gBAGA,eAAIA,WAAW,KACb,MAAS,MADX,kCAKJ,kBAAOA,WAAW,UAChB,eAAIA,WAAW,UACb,eAAIA,WAAW,KACb,MAAS,MADX,gBAGA,eAAIA,WAAW,KACb,MAAS,MADX,sEAEyE,uBAAYA,WAAW,MAAvB,aAFzE,iEAGA,eAAIA,WAAW,KACb,MAAS,SAGb,eAAIA,WAAW,UACb,eAAIA,WAAW,KACb,MAAS,MADX,8BAGA,eAAIA,WAAW,KACb,MAAS,MADX,oDAGA,eAAIA,WAAW,KACb,MAAS,MADX,uCAIF,eAAIA,WAAW,UACb,eAAIA,WAAW,KACb,MAAS,MADX,2BAGA,eAAIA,WAAW,KACb,MAAS,MADX,qDAGA,eAAIA,WAAW,KACb,MAAS,MADX,+BAMN,eACE,GAAM,WADR,YAGA,SAACV,EAAD,CAAWW,MAAM,gBAAgBC,OAAO,IAAIC,UAAU,KAAKJ,QAAQ,eACnE,eACE,GAAM,UADR,YAGA,qBAAK,iBAAMC,WAAW,MAClB,UAAa,eADZ,u3BA6BR,CAEDH,EAAWO,gBAAiB,C","sources":["webpack://target-developers/./src/pages/implement/server-side/node-js/sdk-events.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/target-developers/target-developers/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst CodeBlock = makeShortcode(\"CodeBlock\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"sdk-events\"\n    }}>{`SDK Events`}</h1>\n    <h2 {...{\n      \"id\": \"description\"\n    }}>{`Description`}</h2>\n    <p>{`When `}<a parentName=\"p\" {...{\n        \"href\": \"../initialize-sdk.md\"\n      }}>{`initializing the SDK`}</a>{`, the `}<inlineCode parentName=\"p\">{`options.events`}</inlineCode>{` object is an optional object with event name keys and callback function values. It can be used to subscribe to various events that occur within the SDK. For instance the `}<inlineCode parentName=\"p\">{`clientReady`}</inlineCode>{` event may be used with a callback function that will be invoked when the SDK is ready for method calls.`}</p>\n    <p>{`When the callback function is called, an event object is passed in. Each event has a `}<inlineCode parentName=\"p\">{`type`}</inlineCode>{` corresponding to the event name. Some events include additional properties with pertinent information.`}</p>\n    <h2 {...{\n      \"id\": \"events\"\n    }}>{`Events`}</h2>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Event Name (type)`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Additional Event Properties`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`clientReady`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Emitted when the artifact has downloaded and the SDK is ready for `}<inlineCode parentName=\"td\">{`getOffers`}</inlineCode>{` calls. Recommended when using on-device decisioning method.`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`artifactDownloadSucceeded`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Emitted each time a new artifact is downloaded.`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`artifactPayload, artifactLocation`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`artifactDownloadFailed`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Emitted each time an artifact fails to download.`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`artifactLocation, error`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h2 {...{\n      \"id\": \"example\"\n    }}>{`Example`}</h2>\n    <CodeBlock slots=\"heading, code\" repeat=\"1\" languages=\"js\" mdxType=\"CodeBlock\" />\n    <h3 {...{\n      \"id\": \"nodejs\"\n    }}>{`Node.js`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const targetClient = TargetClient.create({\n    client: \"acmeclient\",\n    organizationId: \"1234567890@AdobeOrg\",\n    decisioningMethod: \"on-device\",\n    events: {\n        clientReady: onTargetClientReady,\n        artifactDownloadSucceeded: onArtifactDownloadSucceeded,\n        artifactDownloadFailed: onArtifactDownloadFailed\n    }\n});\n\nfunction onTargetClientReady() {\n    // make getOffers requests\n    targetClient.getOffers({...})            \n}\n\nfunction onArtifactDownloadSucceeded(event) {\n    console.log(\\`The artifact was successfully downloaded from '\\${event.artifactLocation}'\\`);\n    // optionally do something with event.artifactPayload, like persist it\n}\n\nfunction onArtifactDownloadFailed(event) {\n    console.log(\\`The artifact failed to download from '\\${event.artifactLocation}' with the following error message: \\${event.error.message}\\`);\n}\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["name","_frontmatter","CodeBlock","props","console","warn","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","parentName","slots","repeat","languages","isMDXComponent"],"sourceRoot":""}