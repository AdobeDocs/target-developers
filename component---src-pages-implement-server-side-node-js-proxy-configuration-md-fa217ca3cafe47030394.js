"use strict";(self.webpackChunktarget_developers=self.webpackChunktarget_developers||[]).push([[7305],{41421:function(e,n,t){t.r(n),t.d(n,{_frontmatter:function(){return s},default:function(){return l}});var o=t(87462),r=t(63366),i=(t(15007),t(64983)),a=t(91515),p=["components"],s={},d={_frontmatter:s},c=a.Z;function l(e){var n=e.components,t=(0,r.Z)(e,p);return(0,i.mdx)(c,(0,o.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,i.mdx)("h1",{id:"proxy-configuration"},"Proxy Configuration"),(0,i.mdx)("p",null,"To configure a proxy for the Node SDK's HTTP requests, override the fetch API used by the SDK during initialization."),(0,i.mdx)("p",null,"The following is a basic example showing how to override ",(0,i.mdx)("inlineCode",{parentName:"p"},"fetchApi")," during the ",(0,i.mdx)("inlineCode",{parentName:"p"},"TargetClient")," initialization to add a proxy:"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-javascript"},'const { ProxyAgent } = require("undici");\n\nconst proxyAgent = new ProxyAgent("your proxy address here");\n\nconst fetchImpl = (url, options) => {\n  const fetchOptions = options;\n  fetchOptions.dispatcher = proxyAgent;\n  return fetch(url, fetchOptions);\n};\n\nclient = TargetClient.create({\n    ...,\n    fetchApi: fetchImpl\n});\n')),(0,i.mdx)("p",null,"Note that this only works for Node versions 18.2+, in which ",(0,i.mdx)("inlineCode",{parentName:"p"},"undici.fetch")," is the default ",(0,i.mdx)("inlineCode",{parentName:"p"},"fetch")," for node.\nPlease visit the ",(0,i.mdx)("a",{parentName:"p",href:"https://github.com/adobe/target-nodejs-sdk-samples/tree/master/proxy-configuration"},"Node SDK samples repo"),"\nfor proxy configuration examples for older versions of node and more information."))}l.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-implement-server-side-node-js-proxy-configuration-md-fa217ca3cafe47030394.js.map