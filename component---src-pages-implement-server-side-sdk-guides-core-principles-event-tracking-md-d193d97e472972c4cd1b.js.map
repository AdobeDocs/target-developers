{"version":3,"file":"component---src-pages-implement-server-side-sdk-guides-core-principles-event-tracking-md-d193d97e472972c4cd1b.js","mappings":"gNAUsBA,E,wEAFTC,EAAe,CAAC,EAOvBC,GALgBF,EAKY,cALJ,SAA6BG,GAEzD,OADAC,QAAQC,KAAK,aAAeL,EAAO,4EAC5B,eAASG,EACjB,GAGKG,EAAc,CAClBL,aAAAA,GAEIM,EAAYC,EAAAA,EACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGP,GACF,YACD,OAAO,SAACI,GAAD,UAAeD,EAAiBH,EAAhC,CAAuCO,WAAYA,EAAYC,QAAQ,eAG5E,eACE,GAAM,kBADR,mBAGA,0cACA,wGACA,oBACE,eAAIC,WAAW,OACb,cAAGA,WAAW,MAAd,wEAEF,eAAIA,WAAW,OACb,cAAGA,WAAW,MAAd,+EACA,cAAGA,WAAW,OAAK,iBAAMA,WAAW,IAChC,UAAa,4BACb,MAAS,CACP,SAAY,WACZ,QAAW,QACX,WAAc,OACd,YAAe,OACf,SAAY,WAPC,YAUnB,iBAAMA,WAAW,OACX,UAAa,qCACb,MAAS,CACP,cAAiB,SACjB,SAAY,WACZ,OAAU,IACV,KAAQ,IACR,QAAW,QACX,WAAc,oBACd,cAAiB,UAnBN,QAsBvB,oBAASA,WAAW,QAApB,gBACQ,mBAAQA,WAAW,UACf,OAAU,CAAC,6FAA8F,6FAA8F,8FAA+F,+FACtS,MAAS,oCACT,KAAQ,eAJpB,gBAMQ,mBAAQA,WAAW,UACf,OAAU,CAAC,4FAA6F,4FAA6F,6FAA8F,8FACnS,MAAS,oCACT,KAAQ,cATpB,gBAWQ,gBAAKA,WAAW,UACZ,UAAa,0BACb,IAAO,uFACP,IAAO,YACP,MAAS,YACT,QAAW,OACX,MAAS,CACP,MAAS,OACT,OAAU,OACV,OAAU,IACV,cAAiB,SACjB,SAAY,WACZ,QAAW,IACX,WAAc,eACd,MAAS,UACT,UAAa,+BACb,IAAO,IACP,KAAQ,OA5BtB,cAtBuB,cAyDvB,eACE,GAAM,2BADR,4BAGA,+KACA,uBACE,kBAAOA,WAAW,UAChB,eAAIA,WAAW,UACb,eAAIA,WAAW,KACb,MAAS,MADX,iBAGA,eAAIA,WAAW,KACb,MAAS,MADX,YAKJ,kBAAOA,WAAW,UAChB,eAAIA,WAAW,UACb,eAAIA,WAAW,KACb,MAAS,MADX,eAGA,eAAIA,WAAW,KACb,MAAS,MADX,wDAIF,eAAIA,WAAW,UACb,eAAIA,WAAW,KACb,MAAS,MADX,YAGA,eAAIA,WAAW,KACb,MAAS,MADX,wCAIF,eAAIA,WAAW,UACb,eAAIA,WAAW,KACb,MAAS,MADX,eAGA,eAAIA,WAAW,KACb,MAAS,MADX,sDAMN,eACE,GAAM,iCADR,kCAGA,sDAAuC,cAAGA,WAAW,IACjD,KAAQ,kCAD2B,gBAAvC,uNAGA,oBACE,eAAIA,WAAW,MAAf,gBACA,eAAIA,WAAW,MAAf,qBAEF,SAACV,EAAD,CAAaW,QAAQ,OAAOC,MAAM,OAAOH,QAAQ,iBACjD,sLACA,0BAAW,uBAAYC,WAAW,KAAvB,qBAAX,2FACA,eACE,GAAM,UADR,YAGA,qBAAK,iBAAMA,WAAW,OAAjB,gEAEL,eACE,GAAM,QADR,SAGA,qBAAK,iBAAMA,WAAW,OAAjB,oFAEL,eACE,GAAM,eADR,gBAGA,iIACA,eACE,GAAM,yBADR,0BAGA,uEAAwD,uBAAYA,WAAW,KAAvB,aAAxD,iFACA,uCAAwB,uBAAYA,WAAW,KAAvB,QAAxB,wBAAgG,uBAAYA,WAAW,KAAvB,WAAhG,MACA,wKACA,2KACA,eACE,GAAM,YADR,YAGA,qBAAK,iBAAMA,WAAW,OAAjB,usCAmDL,eACE,GAAM,UADR,SAGA,qBAAK,iBAAMA,WAAW,OAAjB,sqDA4CL,eACE,GAAM,mBADR,oBAGA,uEAAwD,uBAAYA,WAAW,KAAvB,aAAxD,iFACA,uCAAwB,uBAAYA,WAAW,KAAvB,QAAxB,wBAAgG,uBAAYA,WAAW,KAAvB,SAAhG,MACA,uCAAwB,uBAAYA,WAAW,KAAvB,QAAxB,wHACA,eACE,GAAM,YADR,YAGA,qBAAK,iBAAMA,WAAW,OAAjB,qyCAqDL,eACE,GAAM,UADR,SAGA,qBAAK,iBAAMA,WAAW,OAAjB,kyDA+CL,eACE,GAAM,iBADR,kBAGA,gEAAiD,uBAAYA,WAAW,KAAvB,aAAjD,6EACA,uCAAwB,uBAAYA,WAAW,KAAvB,QAAxB,wBAAgG,uBAAYA,WAAW,KAAvB,WAAhG,MACA,kDAAmC,uBAAYA,WAAW,KAAvB,QAAnC,wHACA,eACE,GAAM,YADR,YAGA,qBAAK,iBAAMA,WAAW,OAAjB,2nCA8CL,eACE,GAAM,UADR,SAGA,qBAAK,iBAAMA,WAAW,OAAjB,6oDA4CL,eACE,GAAM,kBADR,mBAGA,gEAAiD,uBAAYA,WAAW,KAAvB,aAAjD,4EACA,uCAAwB,uBAAYA,WAAW,KAAvB,QAAxB,wBAAgG,uBAAYA,WAAW,KAAvB,SAAhG,MACA,uCAAwB,uBAAYA,WAAW,KAAvB,QAAxB,wHACA,eACE,GAAM,YADR,YAGA,qBAAK,iBAAMA,WAAW,OAAjB,2sCAgDL,eACE,GAAM,UADR,SAGA,qBAAK,iBAAMA,WAAW,OAAjB,wwDAiDR,CAEDH,EAAWM,gBAAiB,C","sources":["webpack://target-developers/./src/pages/implement/server-side/sdk-guides/core-principles/event-tracking.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/target-developers/target-developers/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst InlineAlert = makeShortcode(\"InlineAlert\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"event-tracking\"\n    }}>{`Event tracking`}</h1>\n    <p>{`Use Adobe Target's event tracking capabilities to effectively measure metrics that matter most for your business and use cases. Tracking events is key to measuring the success of your experimentation or personalization activities, since they tell you which variation or experience is winning or losing. Understanding this will help you understand how your users are engaging with your product or evolving in an ever-changing landscape.`}</p>\n    <p>{`In order to track events through Adobe Target's SDKs, follow this 2-step process:`}</p>\n    <ol>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Install the SDK and deploy code that sends events to Adobe Target.`}</p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Create and activate an Adobe Target activity with a goal metric in the UI.`}</p>\n        <p parentName=\"li\"><span parentName=\"p\" {...{\n            \"className\": \"gatsby-resp-image-wrapper\",\n            \"style\": {\n              \"position\": \"relative\",\n              \"display\": \"block\",\n              \"marginLeft\": \"auto\",\n              \"marginRight\": \"auto\",\n              \"maxWidth\": \"1280px\"\n            }\n          }}>{`\n      `}<span parentName=\"span\" {...{\n              \"className\": \"gatsby-resp-image-background-image\",\n              \"style\": {\n                \"paddingBottom\": \"83.75%\",\n                \"position\": \"relative\",\n                \"bottom\": \"0\",\n                \"left\": \"0\",\n                \"display\": \"block\",\n                \"transition\": \"opacity 0.5s 0.5s\",\n                \"pointerEvents\": \"none\"\n              }\n            }}></span>{`\n  `}<picture parentName=\"span\">{`\n          `}<source parentName=\"picture\" {...{\n                \"srcSet\": [\"/target-developers/static/d32cc318a7fe3cb768524ea1764f900d/5530d/report-settings.webp 320w\", \"/target-developers/static/d32cc318a7fe3cb768524ea1764f900d/0c8fb/report-settings.webp 640w\", \"/target-developers/static/d32cc318a7fe3cb768524ea1764f900d/94b1e/report-settings.webp 1280w\", \"/target-developers/static/d32cc318a7fe3cb768524ea1764f900d/1ea9b/report-settings.webp 1366w\"],\n                \"sizes\": \"(max-width: 1280px) 100vw, 1280px\",\n                \"type\": \"image/webp\"\n              }}></source>{`\n          `}<source parentName=\"picture\" {...{\n                \"srcSet\": [\"/target-developers/static/d32cc318a7fe3cb768524ea1764f900d/dd4a7/report-settings.png 320w\", \"/target-developers/static/d32cc318a7fe3cb768524ea1764f900d/0f09e/report-settings.png 640w\", \"/target-developers/static/d32cc318a7fe3cb768524ea1764f900d/bbbf7/report-settings.png 1280w\", \"/target-developers/static/d32cc318a7fe3cb768524ea1764f900d/e2f49/report-settings.png 1366w\"],\n                \"sizes\": \"(max-width: 1280px) 100vw, 1280px\",\n                \"type\": \"image/png\"\n              }}></source>{`\n          `}<img parentName=\"picture\" {...{\n                \"className\": \"gatsby-resp-image-image\",\n                \"src\": \"/target-developers/static/d32cc318a7fe3cb768524ea1764f900d/bbbf7/report-settings.png\",\n                \"alt\": \"alt image\",\n                \"title\": \"alt image\",\n                \"loading\": \"lazy\",\n                \"style\": {\n                  \"width\": \"100%\",\n                  \"height\": \"100%\",\n                  \"margin\": \"0\",\n                  \"verticalAlign\": \"middle\",\n                  \"position\": \"absolute\",\n                  \"opacity\": \"0\",\n                  \"transition\": \"opacity 0.5s\",\n                  \"color\": \"inherit\",\n                  \"boxShadow\": \"inset 0px 0px 0px 400px none\",\n                  \"top\": \"0\",\n                  \"left\": \"0\"\n                }\n              }}></img>{`\n        `}</picture>{`\n    `}</span></p>\n      </li>\n    </ol>\n    <h2 {...{\n      \"id\": \"goal-metrics-and-events\"\n    }}>{`Goal Metrics and Events`}</h2>\n    <p>{`The following table defines the combination of goals and events you can define and measure with a Target Activity using Target's reporting capabilities:`}</p>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Primary Goal`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Event`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Conversion`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Viewed a page, Viewed an mbox, and Clicked on mbox`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Revenue`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Viewed an mbox and Clicked on mbox`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Engagement`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Page Views, Customer Scoring, and Time on Site`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h2 {...{\n      \"id\": \"how-impressions-are-triggered\"\n    }}>{`How impressions are triggered`}</h2>\n    <p>{`Target SDKs call the underlying `}<a parentName=\"p\" {...{\n        \"href\": \"../../../delivery-api/index.md\"\n      }}>{`Delivery API`}</a>{`. When an execute object with required parameters is within the request itself, the impression is incremented automatically for qualifying activities. SDK methods that increment an impression automatically are:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`getOffers()`}</li>\n      <li parentName=\"ul\">{`getAttributes()`}</li>\n    </ul>\n    <InlineAlert variant=\"info\" slots=\"text\" mdxType=\"InlineAlert\" />\n    <p>{`When a prefetch object is passed within the request, the impression is not automatically incremented for the activities with mboxes within the prefetch object.`}</p>\n    <p>{`The `}<inlineCode parentName=\"p\">{`sendNotifications`}</inlineCode>{` method can be used to manually send events to Adobe Target and trigger an impression.`}</p>\n    <h3 {...{\n      \"id\": \"nodejs\"\n    }}>{`Node.js`}</h3>\n    <pre><code parentName=\"pre\" {...{}}>{`TargetClient.sendNotifications(options: Object): Promise\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"java\"\n    }}>{`Java`}</h3>\n    <pre><code parentName=\"pre\" {...{}}>{`ResponseStatus TargetClient.sendNotifications(TargetDeliveryRequest request)\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"sample-code\"\n    }}>{`Sample Code`}</h2>\n    <p>{`The following code samples work for all goal metric types whether it be Conversion, Revenue or Engagement.`}</p>\n    <h3 {...{\n      \"id\": \"viewed-a-page-or-mbox\"\n    }}>{`Viewed a Page or Mbox`}</h3>\n    <p>{`This sample first gets a target mbox offer using `}<inlineCode parentName=\"p\">{`getOffers`}</inlineCode>{`. It then constructs a request with a notification based on that mbox offer.`}</p>\n    <p>{`The notification `}<inlineCode parentName=\"p\">{`type`}</inlineCode>{` property is set to `}<inlineCode parentName=\"p\">{`display`}</inlineCode>{`.`}</p>\n    <p>{`To indicate a page was viewed, it is important to specify the the address object in the notification payload. Be sure to set the URL accordingly.`}</p>\n    <p>{`For mboxes, you must set the mbox property on the notification object and provide an array of tokens based on the options array in the targetResult.`}</p>\n    <h4 {...{\n      \"id\": \"nodejs-1\"\n    }}>{`Node.js`}</h4>\n    <pre><code parentName=\"pre\" {...{}}>{`const TargetClient = require(\"@adobe/target-nodejs-sdk\");\nconst { v4: uuidv4 } = require(\"uuid\");\n\nconst client = TargetClient.create({\n  client: \"acmeclient\",\n  organizationId: \"1234567890@AdobeOrg\",\n  events: { clientReady: onTargetReady },\n});\n\nasync function onTargetReady() {\n  const targetResult = await client.getOffers({\n    request: {\n      targetRequest,\n      prefetch: {\n        mboxes: [\n          {\n            name: \"homepage\",\n            index: 1\n          }\n        ]\n      },\n      sessionId: uuidv4()\n    }\n  });\n\n  const { mboxes = [] } = targetResult.response.prefetch;\n\n  const request = {\n    context: { channel: \"web\" },\n    notifications: mboxes.map(mbox => {\n      const { options = [] } = mbox;\n\n      return {\n        id: targetResult.response.id,\n        impressionId: uuidv4(),\n        address: {\n          url: \"http://www.target-demo-site.com\"\n        },\n        timestamp: new Date().getTime(),\n        type: \"display\",\n        mbox: {\n          name: mbox.name\n        },\n        tokens: options.map(option => option.eventToken)\n      };\n    })\n  };\n  // send the notification event\n  await client.sendNotifications({ request });\n}\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"java-1\"\n    }}>{`Java`}</h4>\n    <pre><code parentName=\"pre\" {...{}}>{`ClientConfig clientConfig = ClientConfig.builder()\n                .client(\"acmeclient\")\n                .organizationId(\"1234567890@AdobeOrg\")\n                .build();\n\nTargetClient targetClient = TargetClient.create(clientConfig);\n\nContext context = new Context()\n        .channel(ChannelType.WEB)\n        .address(new Address().url(\"http://www.target-demo-site.com\"));\n\nTargetDeliveryResponse targetResult = targetJavaClient.getOffers(TargetDeliveryRequest.builder()\n        .context(context\n        )\n        .prefetch(new PrefetchRequest()\n                .mboxes(new ArrayList() {{\n                    add(new MboxRequest().name(\"homepage\").index(1));\n                }})\n        )\n        .build());\n\nList<Notification> notifications = new ArrayList<>();\nList<PrefetchMboxResponse> mboxes = targetResult.getResponse().getPrefetch().getMboxes();\n\nfor (PrefetchMboxResponse mbox : mboxes) {\n    List<Option> options = mbox.getOptions();\n\n    notifications.add((Notification) new Notification()\n            .id(targetResult.getResponse().getRequestId())\n            .impressionId(UUID.randomUUID().toString())\n            .timestamp(System.currentTimeMillis())\n            .type(MetricType.DISPLAY)\n            .mbox(new NotificationMbox().name(mbox.getName()))\n            .tokens(options.stream().map(Option::getEventToken).collect(Collectors.toList()))\n            .address(new Address().url(\"http://www.target-demo-site.com\"))\n    );\n}\n\nTargetDeliveryRequest notificationRequest = TargetDeliveryRequest.builder()\n        .context(context)\n        .notifications(notifications).build();\n\ntargetJavaClient.sendNotifications(notificationRequest);\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"clicked-an-mbox\"\n    }}>{`Clicked an Mbox`}</h3>\n    <p>{`This sample first gets a target mbox offer using `}<inlineCode parentName=\"p\">{`getOffers`}</inlineCode>{`. It then constructs a request with a notification based on that mbox offer.`}</p>\n    <p>{`The notification `}<inlineCode parentName=\"p\">{`type`}</inlineCode>{` property is set to `}<inlineCode parentName=\"p\">{`click`}</inlineCode>{`.`}</p>\n    <p>{`You must set the `}<inlineCode parentName=\"p\">{`mbox`}</inlineCode>{` property on the notification object and provide an array of tokens based on the metrics array in the targetResult.`}</p>\n    <h4 {...{\n      \"id\": \"nodejs-2\"\n    }}>{`Node.js`}</h4>\n    <pre><code parentName=\"pre\" {...{}}>{`const TargetClient = require(\"@adobe/target-nodejs-sdk\");\nconst { v4: uuidv4 } = require(\"uuid\");\n\nconst client = TargetClient.create({\n  client: \"acmeclient\",\n  organizationId: \"1234567890@AdobeOrg\",\n  events: { clientReady: onTargetReady },\n});\n\nasync function onTargetReady() {\n  const targetResult = await client.getOffers({\n    request: {\n      targetRequest,\n      prefetch: {\n        mboxes: [\n          {\n            name: \"homepage\",\n            index: 1\n          }\n        ]\n      },\n      sessionId: uuidv4()\n    }\n  });\n\n  const { mboxes = [] } = targetResult.response.prefetch;\n\n  const request = {\n    context: { channel: \"web\" },\n    notifications: mboxes.map(mbox => {\n      const { options = [], metrics = [] } = mbox;\n\n      return {\n        id: targetResult.response.id,\n        impressionId: uuidv4(),\n        address: {\n          url: \"http://www.target-demo-site.com\"\n        },\n        timestamp: new Date().getTime(),\n        type: \"click\",\n        mbox: {\n          name: mbox.name\n        },\n        tokens: metrics\n                  .filter(metric => metric.type === \"click\")\n                  .map(metric => metric.eventToken)\n      };\n    })\n  };\n  // send the notification event\n  await client.sendNotifications({ request });\n}\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"java-2\"\n    }}>{`Java`}</h4>\n    <pre><code parentName=\"pre\" {...{}}>{`ClientConfig clientConfig = ClientConfig.builder()\n                .client(\"acmeclient\")\n                .organizationId(\"1234567890@AdobeOrg\")\n                .build();\n\nTargetClient targetClient = TargetClient.create(clientConfig);\n\nContext context = new Context()\n        .channel(ChannelType.WEB)\n        .address(new Address().url(\"http://www.target-demo-site.com\"));\n\nTargetDeliveryResponse targetResult = targetJavaClient.getOffers(TargetDeliveryRequest.builder()\n        .context(context\n        )\n        .prefetch(new PrefetchRequest()\n                .mboxes(new ArrayList() {{\n                    add(new MboxRequest().name(\"homepage\").index(1));\n                }})\n        )\n        .build());\n\nList<Notification> notifications = new ArrayList<>();\nList<PrefetchMboxResponse> mboxes = targetResult.getResponse().getPrefetch().getMboxes();\n\nfor (PrefetchMboxResponse mbox : mboxes) {\n    List<Metric> metrics = mbox.getMetrics();\n\n    notifications.add((Notification) new Notification()\n            .id(targetResult.getResponse().getRequestId())\n            .impressionId(UUID.randomUUID().toString())\n            .timestamp(System.currentTimeMillis())\n            .type(MetricType.CLICK)\n            .mbox(new NotificationMbox().name(mbox.getName()))\n            .tokens(metrics.stream()\n                    .filter(metric -> MetricType.CLICK.equals(metric.getType()))\n                    .map(Metric::getEventToken)\n                    .collect(Collectors.toList()))\n            .address(new Address().url(\"http://www.target-demo-site.com\"))\n    );\n}\n\nTargetDeliveryRequest notificationRequest = TargetDeliveryRequest.builder()\n        .context(context)\n        .notifications(notifications).build();\n\ntargetJavaClient.sendNotifications(notificationRequest);\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"viewed-a-view\"\n    }}>{`Viewed a View`}</h3>\n    <p>{`This sample first gets target views using `}<inlineCode parentName=\"p\">{`getOffers`}</inlineCode>{`. It then constructs a request with a notification based on those views.`}</p>\n    <p>{`The notification `}<inlineCode parentName=\"p\">{`type`}</inlineCode>{` property is set to `}<inlineCode parentName=\"p\">{`display`}</inlineCode>{`.`}</p>\n    <p>{`For views, you must set the `}<inlineCode parentName=\"p\">{`view`}</inlineCode>{` property on the notification object and provide an array of tokens based on the options array in the targetResult.`}</p>\n    <h4 {...{\n      \"id\": \"nodejs-3\"\n    }}>{`Node.js`}</h4>\n    <pre><code parentName=\"pre\" {...{}}>{`const TargetClient = require(\"@adobe/target-nodejs-sdk\");\nconst { v4: uuidv4 } = require(\"uuid\");\n\nconst client = TargetClient.create({\n  client: \"acmeclient\",\n  organizationId: \"1234567890@AdobeOrg\",\n  events: { clientReady: onTargetReady },\n});\n\nasync function onTargetReady() {\n  const targetResult = await client.getOffers({\n    request: {\n      targetRequest,\n      prefetch: {\n        views: [{}]\n      },\n      sessionId: uuidv4()\n    }\n  });\n\n  const { views = [] } = targetResult.response.prefetch;\n\n  const request = {\n    context: { channel: \"web\" },\n    notifications: views.map(view => {\n      const { options = [], metrics = [] } = view;\n\n      return {\n        id: targetResult.response.id,\n        impressionId: uuidv4(),\n        address: {\n          url: \"http://www.target-demo-site.com\"\n        },\n        timestamp: new Date().getTime(),\n        type: \"display\",\n        view: {\n          name: view.name\n        },\n        tokens: options.map(option => option.eventToken)\n      };\n    })\n  };\n  // send the notification event\n  await client.sendNotifications({ request });\n}\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"java-3\"\n    }}>{`Java`}</h4>\n    <pre><code parentName=\"pre\" {...{}}>{`ClientConfig clientConfig = ClientConfig.builder()\n                .client(\"acmeclient\")\n                .organizationId(\"1234567890@AdobeOrg\")\n                .build();\n\nTargetClient targetClient = TargetClient.create(clientConfig);\n\nContext context = new Context()\n        .channel(ChannelType.WEB)\n        .address(new Address().url(\"http://www.target-demo-site.com\"));\n\nTargetDeliveryResponse targetResult = targetJavaClient.getOffers(TargetDeliveryRequest.builder()\n        .context(context)\n        .prefetch(new PrefetchRequest()\n                .views(new ArrayList() {{\n                    add(new ViewRequest());\n                }})\n        )\n        .build());\n\nList<Notification> notifications = new ArrayList<>();\nList<View> views = targetResult.getResponse().getPrefetch().getViews();\n\nfor (View view : views) {\n    List<Option> options = view.getOptions();\n    List<Metric> metrics = view.getMetrics();\n\n    notifications.add((Notification) new Notification()\n            .id(targetResult.getResponse().getRequestId())\n            .impressionId(UUID.randomUUID().toString())\n            .timestamp(System.currentTimeMillis())\n            .type(MetricType.DISPLAY)\n            .view(new NotificationView().name(view.getName()))\n            .tokens(options.stream().map(Option::getEventToken).collect(Collectors.toList()))\n            .address(new Address().url(\"http://www.target-demo-site.com\"))\n    );\n}\n\nTargetDeliveryRequest notificationRequest = TargetDeliveryRequest.builder()\n        .context(context)\n        .notifications(notifications).build();\n\ntargetJavaClient.sendNotifications(notificationRequest);\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"clicked-a-view\"\n    }}>{`Clicked a View`}</h3>\n    <p>{`This sample first gets target views using `}<inlineCode parentName=\"p\">{`getOffers`}</inlineCode>{`. It then constructs a request with notifications based on those views.`}</p>\n    <p>{`The notification `}<inlineCode parentName=\"p\">{`type`}</inlineCode>{` property is set to `}<inlineCode parentName=\"p\">{`click`}</inlineCode>{`.`}</p>\n    <p>{`You must set the `}<inlineCode parentName=\"p\">{`view`}</inlineCode>{` property on the notification object and provide an array of tokens based on the metrics array in the targetResult.`}</p>\n    <h4 {...{\n      \"id\": \"nodejs-4\"\n    }}>{`Node.js`}</h4>\n    <pre><code parentName=\"pre\" {...{}}>{`const TargetClient = require(\"@adobe/target-nodejs-sdk\");\nconst { v4: uuidv4 } = require(\"uuid\");\n\nconst client = TargetClient.create({\n  client: \"acmeclient\",\n  organizationId: \"1234567890@AdobeOrg\",\n  events: { clientReady: onTargetReady },\n});\n\nasync function onTargetReady() {\n  const targetResult = await client.getOffers({\n    request: {\n      targetRequest,\n      prefetch: {\n        views: [{}]\n      },\n      sessionId: uuidv4()\n    }\n  });\n\n  const { views = [] } = targetResult.response.prefetch;\n\n  const request = {\n    context: { channel: \"web\" },\n    notifications: views.map(view => {\n      const { options = [], metrics = [] } = view;\n\n      return {\n        id: targetResult.response.id,\n        impressionId: uuidv4(),\n        address: {\n          url: \"http://www.target-demo-site.com\"\n        },\n        timestamp: new Date().getTime(),\n        type: \"click\",\n        view: {\n          name: view.name\n        },\n        tokens: metrics\n                  .filter(metric => metric.type === \"click\")\n                  .map(metric => metric.eventToken)\n      };\n    })\n  };\n  // send the notification event\n  await client.sendNotifications({ request });\n}\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"java-4\"\n    }}>{`Java`}</h4>\n    <pre><code parentName=\"pre\" {...{}}>{`ClientConfig clientConfig = ClientConfig.builder()\n                .client(\"acmeclient\")\n                .organizationId(\"1234567890@AdobeOrg\")\n                .build();\n\nTargetClient targetClient = TargetClient.create(clientConfig);\n\nContext context = new Context()\n        .channel(ChannelType.WEB)\n        .address(new Address().url(\"http://www.target-demo-site.com\"));\n\nTargetDeliveryResponse targetResult = targetJavaClient.getOffers(TargetDeliveryRequest.builder()\n        .context(context)\n        .prefetch(new PrefetchRequest()\n                .views(new ArrayList() {{\n                    add(new ViewRequest());\n                }})\n        )\n        .build());\n\nList<Notification> notifications = new ArrayList<>();\nList<View> views = targetResult.getResponse().getPrefetch().getViews();\n\nfor (View view : views) {\n    List<Option> options = view.getOptions();\n    List<Metric> metrics = view.getMetrics();\n\n    notifications.add((Notification) new Notification()\n            .id(targetResult.getResponse().getRequestId())\n            .impressionId(UUID.randomUUID().toString())\n            .timestamp(System.currentTimeMillis())\n            .type(MetricType.CLICK)\n            .view(new NotificationView().name(view.getName()))\n            .tokens(metrics.stream()\n                    .filter(metric -> MetricType.CLICK.equals(metric.getType()))\n                    .map(Metric::getEventToken)\n                    .collect(Collectors.toList()))\n            .address(new Address().url(\"http://www.target-demo-site.com\"))\n    );\n}\n\nTargetDeliveryRequest notificationRequest = TargetDeliveryRequest.builder()\n        .context(context)\n        .notifications(notifications).build();\n\ntargetJavaClient.sendNotifications(notificationRequest);\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["name","_frontmatter","InlineAlert","props","console","warn","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","parentName","variant","slots","isMDXComponent"],"sourceRoot":""}