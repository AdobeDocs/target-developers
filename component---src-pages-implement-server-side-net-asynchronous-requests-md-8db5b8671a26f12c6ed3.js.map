{"version":3,"file":"component---src-pages-implement-server-side-net-asynchronous-requests-md-8db5b8671a26f12c6ed3.js","mappings":"gNAUsBA,E,wEAFTC,EAAe,CAAC,EAOvBC,GALgBF,EAKU,YALF,SAA6BG,GAEzD,OADAC,QAAQC,KAAK,aAAeL,EAAO,4EAC5B,eAASG,EACjB,GAGKG,EAAc,CAClBL,aAAAA,GAEIM,EAAYC,EAAAA,EACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGP,GACF,YACD,OAAO,SAACI,GAAD,UAAeD,EAAiBH,EAAhC,CAAuCO,WAAYA,EAAYC,QAAQ,eAG5E,eACE,GAAM,yBADR,0BAGA,eACE,GAAM,eADR,gBAGA,8SACA,eACE,GAAM,qBADR,sBAGA,SAACT,EAAD,CAAWU,MAAM,gBAAgBC,OAAO,IAAIC,UAAU,SAASH,QAAQ,eACvE,eACE,GAAM,OADR,YAGA,qBAAK,iBAAMI,WAAW,MAClB,UAAa,mBADZ,2QAML,eACE,GAAM,WADR,YAGA,4EACA,SAACb,EAAD,CAAWU,MAAM,gBAAgBC,OAAO,IAAIC,UAAU,SAASH,QAAQ,eACvE,eACE,GAAM,SADR,YAGA,qBAAK,iBAAMI,WAAW,MAClB,UAAa,mBADZ,k+BAqBL,oDAAqC,cAAGA,WAAW,IAC/C,KAAQ,wBADyB,uBAArC,KAKH,CAEDN,EAAWO,gBAAiB,C","sources":["webpack://target-developers/./src/pages/implement/server-side/net/asynchronous-requests.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/target-developers/target-developers/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst CodeBlock = makeShortcode(\"CodeBlock\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"asynchronous-requests\"\n    }}>{`Asynchronous Requests`}</h1>\n    <h2 {...{\n      \"id\": \"description\"\n    }}>{`Description`}</h2>\n    <p>{`One benefit of server-side integration is that one can leverage the huge bandwidth and computing resources available on the server-side by using parallelism. Target .NET SDK supports asynchronous requests, making it easy to integrate Target into an app's existing async workflow.`}</p>\n    <h2 {...{\n      \"id\": \"supported-methods\"\n    }}>{`Supported Methods`}</h2>\n    <CodeBlock slots=\"heading, code\" repeat=\"1\" languages=\"dotnet\" mdxType=\"CodeBlock\" />\n    <h3 {...{\n      \"id\": \"net\"\n    }}>{`.`}{`NET`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-dotnet\"\n      }}>{`Task<TargetDeliveryResponse> GetOffersAsync(TargetDeliveryRequest request);\nTask<TargetDeliveryResponse> SendNotificationsAsync(TargetDeliveryRequest request);\nTask<TargetAttributes> GetAttributesAsync(TargetDeliveryRequest request, params string[] mboxes);\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"example\"\n    }}>{`Example`}</h2>\n    <p>{`A sample async SDK API usage could appear as follows:`}</p>\n    <CodeBlock slots=\"heading, code\" repeat=\"1\" languages=\"dotnet\" mdxType=\"CodeBlock\" />\n    <h3 {...{\n      \"id\": \"net-1\"\n    }}>{`.`}{`NET`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-dotnet\"\n      }}>{`var deliveryRequest = new TargetDeliveryRequest.Builder()\n    .SetExecute(new ExecuteRequest(mboxes: new List<MboxRequest> { new MboxRequest(index: 1, name: \"a1-serverside-ab\") }))\n    .Build();\n\nvar response = await this.targetClient.GetOffersAsync(deliveryRequest);\n\nvar notificationRequest = new TargetDeliveryRequest.Builder()\n    .SetSessionId(response.Request.SessionId)\n    .SetTntId(response.Response?.Id?.TntId)\n    .SetNotifications(new List<Notification>\n        {\n            new (id: \"1\", type: MetricType.Display, timestamp: DateTimeOffset.UtcNow.ToUnixTimeMilliseconds(),\n                mbox: new NotificationMbox(\"product1\", \"J+W1Fq18hxliDDJonTPfV0S+mzxapAO3d14M43EsM9f12A6QaqL+E3XKkRFlmq9U\"),\n                tokens: new List<string> { \"t0FRvoWosOqHmYL5G18QCZNWHtnQtQrJfmRrQugEa2qCnQ9Y9OaLL2gsdrWQTvE54PwSz67rmXWmSnkXpSSS2Q==\" })\n        })\n    .Build();\n\nvar notificationResponse = await this.targetClient.SendNotificationsAsync(notificationRequest);\n`}</code></pre>\n    <p>{`This example assumes you have `}<a parentName=\"p\" {...{\n        \"href\": \"../initialize-sdk.md\"\n      }}>{`initialized the SDK`}</a>{`.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["name","_frontmatter","CodeBlock","props","console","warn","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","slots","repeat","languages","parentName","isMDXComponent"],"sourceRoot":""}