{"version":3,"file":"component---src-pages-implement-server-side-sdk-guides-core-principles-user-permissions-and-properties-md-fa804490f56d5475bd50.js","mappings":"wRAQaA,EAAe,CAAC,EACvBC,EAAc,CAClBD,aAAAA,GAEIE,EAAYC,EAAAA,EACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,GACF,YACD,OAAO,SAACJ,GAAD,UAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,eAG5E,eACE,GAAM,mCADR,oCAGA,mOAAoN,cAAGC,WAAW,IAC9N,KAAQ,iHADwM,+BAApN,MAGA,sFACA,eACE,GAAM,yBADR,0BAGA,eACE,GAAM,UADR,YAGA,qBAAK,iBAAMA,WAAW,OAAjB,oPAUL,eACE,GAAM,QADR,SAGA,qBAAK,iBAAMA,WAAW,OAAjB,kSAQL,eACE,GAAM,+CADR,gDAGA,8EAA+D,uBAAYA,WAAW,KAAvB,aAA/D,uJACA,eACE,GAAM,YADR,YAGA,qBAAK,iBAAMA,WAAW,OAAjB,+WAkBL,eACE,GAAM,UADR,SAGA,qBAAK,iBAAMA,WAAW,OAAjB,8dAcR,CAEDJ,EAAWK,gBAAiB,C","sources":["webpack://target-developers/./src/pages/implement/server-side/sdk-guides/core-principles/user-permissions-and-properties.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/target-developers/target-developers/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"user-permissions-and-properties\"\n    }}>{`User Permissions and Properties`}</h1>\n    <p>{`The Target SDKs include support for user permissions and properties. If you are unfamiliar with how Adobe Target handles enterprise permissions via workspaces and properties, you can read more about it in `}<a parentName=\"p\" {...{\n        \"href\": \"https://experienceleague.adobe.com/docs/target/using/administer/manage-users/enterprise/property-channel.html\"\n      }}>{`Enterprise user permissions`}</a>{`.`}</p>\n    <p>{`The client can make use of a property token in one of two ways.`}</p>\n    <h2 {...{\n      \"id\": \"global-property-token\"\n    }}>{`Global Property Token`}</h2>\n    <h3 {...{\n      \"id\": \"nodejs\"\n    }}>{`Node.js`}</h3>\n    <pre><code parentName=\"pre\" {...{}}>{`const CONFIG = {\n    client: \"acmeclient\",\n    organizationId: \"1234567890@AdobeOrg\",\n    propertyToken: \"8c4630b1-16db-e2fc-3391-8b3d81436cfb\"\n};\n\nconst targetClient = TargetClient.create(CONFIG);\n\ntargetClient.getOffers({...})\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"java\"\n    }}>{`Java`}</h3>\n    <pre><code parentName=\"pre\" {...{}}>{`ClientConfig clientConfig = ClientConfig.builder()\n    .client(\"emeaprod4\")\n    .organizationId(\"0DD934B85278256B0A490D44@AdobeOrg\")\n    .defaultPropertyToken(\"8c4630b1-16db-e2fc-3391-8b3d81436cfb\")\n    .build();\n\nTargetClient targetClient = TargetClient.create(clientConfig);\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"incidental-property-token-in-getoffers-call\"\n    }}>{`Incidental Property Token in getOffers call`}</h2>\n    <p>{`A property token can also be specified in an individual `}<inlineCode parentName=\"p\">{`getOffers`}</inlineCode>{` call. This is done by adding a property object to the request. A property token specified in this way takes precedent over one set in the config.`}</p>\n    <h3 {...{\n      \"id\": \"nodejs-1\"\n    }}>{`Node.js`}</h3>\n    <pre><code parentName=\"pre\" {...{}}>{`const CONFIG = {\n    client: \"acmeclient\",\n    organizationId: \"1234567890@AdobeOrg\",\n};\n\nconst targetClient = TargetClient.create(CONFIG);\n\ntargetClient.getOffers({\n    request: {\n        execute: {\n            pageLoad: {}\n        },\n        property: {\n            token: \"8c4630b1-16db-e2fc-3391-8b3d81436cfb\"\n        }           \n    }\n})\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"java-1\"\n    }}>{`Java`}</h3>\n    <pre><code parentName=\"pre\" {...{}}>{`ExecuteRequest executeRequest = new ExecuteRequest()\n    .mboxes(getMboxRequests(mbox));\n\nTargetDeliveryRequest targetDeliveryRequest = TargetDeliveryRequest.builder()\n    .context(getContext(request))\n    .execute(executeRequest)\n    .cookies(getTargetCookies(request.getCookies()))\n    .property(new Property().token(\"8c4630b1-16db-e2fc-3391-8b3d81436cfb\"))\n    .build();\n\nTargetDeliveryResponse targetResponse = targetClient.getOffers(targetDeliveryRequest);\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"sourceRoot":""}