"use strict";(self.webpackChunktarget_developers=self.webpackChunktarget_developers||[]).push([[9078],{17248:function(e,t,n){n.r(t),n.d(t,{_frontmatter:function(){return c},default:function(){return f}});var a,d=n(87462),i=n(63366),o=(n(15007),n(64983)),r=n(91515),l=["components"],c={},m=(a="CodeBlock",function(e){return console.warn("Component "+a+" was not imported, exported, or provided by MDXProvider as global scope"),(0,o.mdx)("div",e)}),s={_frontmatter:c},p=r.Z;function f(e){var t=e.components,n=(0,i.Z)(e,l);return(0,o.mdx)(p,(0,d.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,o.mdx)("h1",{id:"sdk-events"},"SDK Events"),(0,o.mdx)("h2",{id:"description"},"Description"),(0,o.mdx)("p",null,"When ",(0,o.mdx)("a",{parentName:"p",href:"../initialize-sdk.md"},"initializing the SDK"),", the ",(0,o.mdx)("inlineCode",{parentName:"p"},'options["events"]')," dict is an optional object with event name keys and callback function values. It can be used to subscribe to various events that occur within the SDK. For instance, the ",(0,o.mdx)("inlineCode",{parentName:"p"},"client_ready")," event may be used with a callback function that will be invoked when the SDK is ready for method calls."),(0,o.mdx)("p",null,"When the ",(0,o.mdx)("inlineCode",{parentName:"p"},"callback")," function is called, an event object is passed in. Each event has a ",(0,o.mdx)("inlineCode",{parentName:"p"},"type")," corresponding to the event name, and some events include additional properties with pertinent information."),(0,o.mdx)("h2",{id:"events"},"Events"),(0,o.mdx)("table",null,(0,o.mdx)("thead",{parentName:"table"},(0,o.mdx)("tr",{parentName:"thead"},(0,o.mdx)("th",{parentName:"tr",align:null},"Event Name (type)"),(0,o.mdx)("th",{parentName:"tr",align:null},"Description"),(0,o.mdx)("th",{parentName:"tr",align:null},"Additional Event Properties"))),(0,o.mdx)("tbody",{parentName:"table"},(0,o.mdx)("tr",{parentName:"tbody"},(0,o.mdx)("td",{parentName:"tr",align:null},"client_ready"),(0,o.mdx)("td",{parentName:"tr",align:null},"Emitted when the artifact has downloaded and the SDK is ready for get_offers calls. Recommended when using"),(0,o.mdx)("td",{parentName:"tr",align:null},"on-device decisioning method.")),(0,o.mdx)("tr",{parentName:"tbody"},(0,o.mdx)("td",{parentName:"tr",align:null},"artifact_download_succeeded"),(0,o.mdx)("td",{parentName:"tr",align:null},"Emitted each time a new artifact is downloaded."),(0,o.mdx)("td",{parentName:"tr",align:null},"artifact_payload, artifact_location")),(0,o.mdx)("tr",{parentName:"tbody"},(0,o.mdx)("td",{parentName:"tr",align:null},"artifact_download_failed"),(0,o.mdx)("td",{parentName:"tr",align:null},"Emitted each time an artifact fails to download."),(0,o.mdx)("td",{parentName:"tr",align:null},"artifact_location, error")))),(0,o.mdx)("h2",{id:"example"},"Example"),(0,o.mdx)(m,{slots:"heading, code",repeat:"1",languages:"python",mdxType:"CodeBlock"}),(0,o.mdx)("h3",{id:"python"},"Python"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-python"},'def client_ready_callback():\n    # make get_offers requests\n\ndef artifact_download_succeeded(event):\n    print("The artifact was successfully downloaded from {}".format(event.artifact_location))\n    # optionally do something with event.artifact_payload, like persist it\n\ndef artifact_download_failed(event):\n    print("The artifact failed to download from {} with the following error: {}"\n          .format(event.artifact_location, str(event.error)))\n\nclient_options = {\n    "client": "acmeclient",\n    "organization_id": "1234567890@AdobeOrg",\n    "events": {\n        "client_ready": client_ready_callback,\n        "artifact_download_succeeded": artifact_download_succeeded,\n        "artifact_download_failed": artifact_download_failed\n    }\n}\ntarget_client = target_client.create(client_options)\n')))}f.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-implement-server-side-python-sdk-events-md-f51a9b8262ff9c5ea11f.js.map