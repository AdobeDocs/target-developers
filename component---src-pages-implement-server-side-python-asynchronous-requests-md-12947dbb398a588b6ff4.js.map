{"version":3,"file":"component---src-pages-implement-server-side-python-asynchronous-requests-md-12947dbb398a588b6ff4.js","mappings":"gNAUsBA,E,wEAFTC,EAAe,CAAC,EAOvBC,GALgBF,EAKU,YALF,SAA6BG,GAEzD,OADAC,QAAQC,KAAK,aAAeL,EAAO,4EAC5B,eAASG,EACjB,GAGKG,EAAc,CAClBL,aAAAA,GAEIM,EAAYC,EAAAA,EACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGP,GACF,YACD,OAAO,SAACI,GAAD,UAAeD,EAAiBH,EAAhC,CAAuCO,WAAYA,EAAYC,QAAQ,eAG5E,eACE,GAAM,yBADR,0BAGA,eACE,GAAM,eADR,gBAGA,0RACA,eACE,GAAM,qBADR,sBAGA,SAACT,EAAD,CAAWU,MAAM,gBAAgBC,OAAO,IAAIC,UAAU,SAASH,QAAQ,eACvE,eACE,GAAM,UADR,WAGA,qBAAK,iBAAMI,WAAW,MAClB,UAAa,mBADZ,6FAML,eACE,GAAM,WADR,YAGA,yDAA0C,uBAAYA,WAAW,KAAvB,WAA1C,+DACA,SAACb,EAAD,CAAWU,MAAM,gBAAgBC,OAAO,IAAIC,UAAU,SAASH,QAAQ,eACvE,eACE,GAAM,YADR,WAGA,qBAAK,iBAAMI,WAAW,MAClB,UAAa,mBADZ,iuBAoBL,qKAAsJ,uBAAYA,WAAW,KAAvB,oBAAtJ,QAA0N,uBAAYA,WAAW,KAAvB,cAA1N,0HAA0Y,cAAGA,WAAW,IACpZ,KAAQ,uEAD8X,QAA1Y,KAKH,CAEDN,EAAWO,gBAAiB,C","sources":["webpack://target-developers/./src/pages/implement/server-side/python/asynchronous-requests.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/target-developers/target-developers/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst CodeBlock = makeShortcode(\"CodeBlock\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"asynchronous-requests\"\n    }}>{`Asynchronous Requests`}</h1>\n    <h2 {...{\n      \"id\": \"description\"\n    }}>{`Description`}</h2>\n    <p>{`One benefit of server-side integration is that you can leverage the huge bandwidth and computing resources available on the server-side by using parallelism. Target Python SDK supports asynchronous requests, which can reduce the effective target time to zero.`}</p>\n    <h2 {...{\n      \"id\": \"supported-methods\"\n    }}>{`Supported Methods`}</h2>\n    <CodeBlock slots=\"heading, code\" repeat=\"1\" languages=\"python\" mdxType=\"CodeBlock\" />\n    <h3 {...{\n      \"id\": \"python\"\n    }}>{`Python`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`get_offers(options)\nsend_notifications(options)\nget_attributes(mbox_names, options)\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"example\"\n    }}>{`Example`}</h2>\n    <p>{`A sample application that uses the `}<inlineCode parentName=\"p\">{`asyncio`}</inlineCode>{` module's async/await in Python 3.9+ could look like this:`}</p>\n    <CodeBlock slots=\"heading, code\" repeat=\"1\" languages=\"python\" mdxType=\"CodeBlock\" />\n    <h3 {...{\n      \"id\": \"python-1\"\n    }}>{`Python`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`async def execute_mboxes(self, mboxes):\n    context = Context(channel=ChannelType.WEB)\n    execute = ExecuteRequest(mboxes=mboxes)\n    delivery_request = DeliveryRequest(context=context, execute=execute)\n\n    get_offers_options = {\n      \"request\": delivery_request\n    }\n    return await asyncio.to_thread(target_client.get_offers, get_offers_options)\n\nasync def get_target_delivery_response(mboxes):\n    target_delivery_response = await execute_mboxes(mboxes)\n    response = Response(target_delivery_response.get(\"response\").to_str(), status=200, mimetype='application/json')\n    return response\n\nmboxes = [MboxRequest(name=\"a1-serverside-ab\", index=1)]\nreturn asyncio.run(get_target_delivery_response(mboxes)\n`}</code></pre>\n    <p>{`This example assumes you you are using Python 3.9+. If using an older version of Python you can still send asynchronous requests by passing in `}<inlineCode parentName=\"p\">{`options.callback`}</inlineCode>{` to `}<inlineCode parentName=\"p\">{`get_offers`}</inlineCode>{`. Check out the sample Flask app for more details about asynchronous execution using either callbacks or async/await, `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/adobe/target-python-sdk/blob/main/samples/app.py\"\n      }}>{`here`}</a>{`.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["name","_frontmatter","CodeBlock","props","console","warn","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","slots","repeat","languages","parentName","isMDXComponent"],"sourceRoot":""}