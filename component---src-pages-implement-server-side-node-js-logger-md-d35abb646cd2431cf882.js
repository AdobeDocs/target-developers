"use strict";(self.webpackChunktarget_developers=self.webpackChunktarget_developers||[]).push([[3421],{97534:function(e,n,o){o.r(n),o.d(n,{_frontmatter:function(){return l},default:function(){return g}});var t,r=o(87462),a=o(63366),d=(o(15007),o(64983)),i=o(91515),s=["components"],l={},p=(t="CodeBlock",function(e){return console.warn("Component "+t+" was not imported, exported, or provided by MDXProvider as global scope"),(0,d.mdx)("div",e)}),m={_frontmatter:l},c=i.Z;function g(e){var n=e.components,o=(0,a.Z)(e,s);return(0,d.mdx)(c,(0,r.Z)({},m,o,{components:n,mdxType:"MDXLayout"}),(0,d.mdx)("h1",{id:"logger"},"Logger"),(0,d.mdx)("h2",{id:"description"},"Description"),(0,d.mdx)("p",null,"When ",(0,d.mdx)("a",{parentName:"p",href:"../initialize-sdk.md"},"initializing the SDK"),", the ",(0,d.mdx)("inlineCode",{parentName:"p"},"options.logger")," object is an optional object. However, in order to debug effectively when an issue occurs, a ",(0,d.mdx)("inlineCode",{parentName:"p"},"logger")," object should be provided when initializing the SDK."),(0,d.mdx)("p",null,"The ",(0,d.mdx)("inlineCode",{parentName:"p"},"logger")," object is expected to have a ",(0,d.mdx)("inlineCode",{parentName:"p"},"debug()")," and an ",(0,d.mdx)("inlineCode",{parentName:"p"},"error()")," method. When an appropriate logger is provided, such as ",(0,d.mdx)("inlineCode",{parentName:"p"},"console"),", Target requests and responses will be logged."),(0,d.mdx)("h2",{id:"example"},"Example"),(0,d.mdx)(p,{slots:"heading, code",repeat:"1",languages:"js",mdxType:"CodeBlock"}),(0,d.mdx)("h3",{id:"nodejs"},"Node.js"),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-js"},'const TargetClient = require("@adobe/target-nodejs-sdk");\nconst CONFIG = {\n  client: "acmeclient",\n  organizationId: "1234567890@AdobeOrg",\n  logger: console\n};\n\nconst targetClient = TargetClient.create(CONFIG);\n\nconst request = {\n    execute: {\n        mboxes: [{\n            name: "a1-serverside-ab",\n            index: 1\n        }]\n    }\n};\n\nconst response = await targetClient.getOffers({ request, targetCookie });\n')),(0,d.mdx)("p",null,"You should see requests and responses being printed in the console."))}g.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-implement-server-side-node-js-logger-md-d35abb646cd2431cf882.js.map